package lab2;

public class Graph {
    private int numStudents, numProjects;
    private int[][] adjM;
    private int[] subset;
    private int [] visited;
    private int[] checked;
    private boolean hasSolution=true;
    int count;

    /**
     * Class constructor
     * @param numStudents
     * @param numProjects
     */
    public Graph(int numStudents, int numProjects) {
       this.numStudents = numStudents;
       this.numProjects = numProjects;
        adjM = new int[numStudents][numProjects];
        subset = new int[numStudents+1];
        visited = new int[numStudents+1];
        checked = new int[numProjects+1];
        for(int i = 0; i < numStudents; i++) {
            for(int j = 0; j < numProjects; j++) {
                adjM[i][j] = 0;
            }
        }
    }

    /**
     * Displays the subset generated by backtracking
     * @param l
     */
    public void printSubset(int l)
    {
        for(int i=0; i<l; i++)
            System.out.print(subset[i]+" ");
        System.out.println();


    }

    /**
     * Dispplays the adjency matrix
     */
    public void printMatrix()
    {int i, j;
        for(i=0; i<numStudents; i++) {
            for (j = 0; j < numProjects; j++) {
                System.out.print(adjM[i][j] + " ");
            }
            System.out.println();
        }

    }

    /**
     * Sets all nodes unvisited
     */
    void init()
    {
        count = 0;
        for(int i=0; i<numProjects; i++) {
            checked[i] = 0;
        }
    }

    /**
     * Adds an edge between u and v
     * @param u
     * @param v
     */
    public void setEdge(int u, int v)
    {
        adjM[u][v] = 1;
    }

    /**
     * Checks if the property of Hall's theorem holds for every generated subset of vertices
     * @param l
     * @return
     */
    public boolean propertyHolds(int l)
    {
           for(int i=0; i<l; i++) {
               for (int j = 0; j < numProjects; j++) {
                   if (adjM[subset[i]][j] == 1 && checked[j] == 0) {
                      // System.out.println(Subset[i] + " " + j);
                       count++;
                       checked[j] = 1;
                   }
               }
           }
           // System.out.println(count);


        return count >= l;


    }

    /**
     * Generates all the subsets of S-the set of students
     * @param p
     */
    public void backTracking(int p) {
        if (p ==numStudents+1) { //printSubset();

        }
            else {
             //   printSubset(p);
                if(p!=0)
                {
                    init();
                   if (!propertyHolds(p)){
                       hasSolution=false;
                       return;

                   };
                }
           //  findNeighbours(p);
            for (int i = 0; i < numStudents; i++) {
                if (visited[i] == 0 && (p==0 || subset[p-1]<i)) {
                    visited[i] = 1;
                    subset[p] = i;
                    backTracking(p + 1);
                    visited[i] = 0;


                }
            }
        }
    }

    /**
     *
     * @return returns true if the problem has a solution
     */
    public boolean getHasSolution() {
        return hasSolution;
    }
}
